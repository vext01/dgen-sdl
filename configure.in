dnl DGen/SDL v1.29
dnl At long last, the configure script!

AC_INIT(
	[DGen/SDL],
	[1.29],
	[zamaz@users.sourceforge.net],
	[dgen-sdl],
	[http://sourceforge.net/projects/dgen],
)

dnl We'll need machine type later.
AC_CANONICAL_SYSTEM

dnl Initialize Automake.
AM_INIT_AUTOMAKE([silent-rules])
AM_SILENT_RULES([yes])

dnl Check for standard programs.
AC_PROG_CC
AC_PROG_CC_C99
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB

dnl Set the value of make, if make doesn't already.
AC_PROG_MAKE_SET

dnl We're using C.
AC_LANG([C])

dnl Check endianness.
AC_C_BIGENDIAN

dnl Cross compilation stuff.
AS_IF(
	[test "x$cross_compiling" = xno],
	[CC_FOR_BUILD="${CC}"]
	[CFLAGS_FOR_BUILD="${CFLAGS}"]
	[OBJEXT_FOR_BUILD="${OBJEXT}"]
	[EXEEXT_FOR_BUILD="${EXEEXT}"]
)
AS_IF(
	[test "x$cross_compiling" = xyes],
	[AC_MSG_CHECKING([for host C compiler])]
	[CC_FOR_BUILD="${CC_FOR_BUILD-cc}"]
	[AC_MSG_RESULT([$CC_FOR_BUILD])]
	[AC_MSG_CHECKING([for suffix of host object files])]
	[
{
	# Sane values by default.
	OBJEXT_FOR_BUILD=o
	EXEEXT_FOR_BUILD=
	# Try to compile a program, find out default extensions.
	EXT_SUCCESS=0
	rm -f conftest*
	cat <<EOF > conftest.c &&
int main(void) { return 0; }
EOF
	$CC_FOR_BUILD -c conftest.c &&
	rm -f conftest.c &&
	for file in conftest.*
	do
		test -f $file ||
		! continue
		OBJEXT_FOR_BUILD="${file##*.}"
		test -z "$OBJEXT_FOR_BUILD" &&
		! continue
		break
	done &&
	for ext in '' '.exe'
	do
		$CC_FOR_BUILD -o conftest$ext $file &&
		./conftest$ext ||
		! continue
		EXEEXT_FOR_BUILD="$ext"
		break
	done &&
	EXT_SUCCESS=1
	rm -f conftest*
} 1>&AS_MESSAGE_LOG_FD 2>&1
	]
	[AS_IF(
		[test "x$EXT_SUCCESS" = x1],
		[AC_MSG_RESULT([$OBJEXT_FOR_BUILD])]
		[AC_MSG_CHECKING([for suffix of host executables])]
		[AS_IF(
			[test "x$EXEEXT_FOR_BUILD" = x],
			[AC_MSG_RESULT([none])],
			[AC_MSG_RESULT([$EXEEXT_FOR_BUILD])]
		)],
		[AC_MSG_RESULT([unable to determine])]
		[AC_MSG_FAILURE([can't cross-compile if host objects \
extension isn't known])]
	)]
)

dnl Libraries used by dgen_tobin.
TOBIN_LIBS="${LIBS} ${TOBIN_LIBS}"

dnl Check for SDL libs.
AM_PATH_SDL([1.2.0], [], [AC_MSG_ERROR([SDL version >= 1.2.0 not found.])])
CFLAGS="$CFLAGS $SDL_CFLAGS"
CPPFLAGS="$CPPFLAGS $SDL_CFLAGS"
LIBS="$LIBS $SDL_LIBS"

dnl Check for the SDL_WM_ToggleFullScreen function.
AC_CHECK_FUNCS([SDL_WM_ToggleFullScreen])

dnl Check for ftello().
AC_CHECK_FUNCS([ftello])

dnl Debugging?
AC_ARG_ENABLE(
	[debug],
	[AS_HELP_STRING(
		[--enable-debug],
		[enable debugging [default=no]]
	)],
	[USE_DEBUG=$enableval],
	[USE_DEBUG=no]
)

dnl Check for joystick support.
AC_ARG_ENABLE(
	[joystick],
	[AS_HELP_STRING(
		[--enable-joystick],
		[enable joystick support [default=auto]]
	)],
	[USE_JOYSTICK=$enableval],
	[USE_JOYSTICK=auto]
)
AS_IF(
	[test "x$USE_JOYSTICK" != xno],
	[AC_CHECK_HEADER(
		[SDL_joystick.h],
		[USE_JOYSTICK=SDL],
		[AC_CHECK_HEADER(
			[linux/joystick.h],
			[USE_JOYSTICK=Linux],
			[USE_JOYSTICK=no]
		)]
	)]
)
AS_IF(
	[test "x$enable_joystick" = xyes -a "x$USE_JOYSTICK" = xno],
	[AC_MSG_FAILURE([joystick support seems unavailable])]
)

dnl Check for OpenGL support.
AC_ARG_ENABLE(
	[opengl],
	[AS_HELP_STRING(
		[--enable-opengl],
		[enable OpenGL support [default=auto]]
	)],
	[USE_OPENGL=$enableval],
	[USE_OPENGL=auto]
)
AS_IF(
	[test "x$USE_OPENGL" != xno],
	[AC_CHECK_HEADER(
		[SDL_opengl.h],
		[AC_SEARCH_LIBS(
			[glEnd],
			[GL opengl32 gl],
			[USE_OPENGL=yes],
			[AS_IF(
				[test "x$cross_compiling" = xyes],
				dnl When nothing works, use brute force.
				[USE_OPENGL=no]
				[AC_CHECK_LIB(
					[GL],
					[main],
					[LIBS="-lGL $LIBS"]
					[USE_OPENGL=yes]
				)]
				[AC_CHECK_LIB(
					[opengl32],
					[main],
					[LIBS="-lopengl32 $LIBS"]
					[USE_OPENGL=yes]
				)]
				[AC_CHECK_LIB(
					[gl],
					[main],
					[LIBS="-lgl $LIBS"]
					[USE_OPENGL=yes]
				)],
				[USE_OPENGL=no]
			)]
		)],
		[USE_OPENGL=no]
	)]
)
AS_IF(
	[test "x$enable_opengl" = xyes -a "x$USE_OPENGL" = xno],
	[AC_MSG_FAILURE([OpenGL support seems unavailable])]
)

dnl Check for libarchive. Note that older versions of libarchive don't have
dnl archive_read_support_format_raw().
AC_ARG_WITH(
	[libarchive],
	[AS_HELP_STRING(
		[--with-libarchive],
		[use libarchive for compressed ROMs [default=auto]]
	)],
	[USE_LIBARCHIVE=$enableval],
	[USE_LIBARCHIVE=auto]
)
AS_IF(
	[test "x$USE_LIBARCHIVE" != xno],
	[AC_CHECK_HEADER(
		[archive.h],
		[AC_CHECK_LIB(
			[archive],
			[archive_read_support_format_raw],
			[LIBS="-larchive $LIBS"]
			[TOBIN_LIBS="-larchive $TOBIN_LIBS"]
			[USE_LIBARCHIVE=yes],
			[USE_LIBARCHIVE=no]
		)],
		[USE_LIBARCHIVE=no]
	)]
)

dnl Check for glob.h.
AC_CHECK_HEADERS([glob.h])

dnl Try to add shell32.
AC_CHECK_LIB([shell32], [main])

dnl Check for ASM availability.
AC_ARG_ENABLE(
	[asm],
	[AS_HELP_STRING(
		[--disable-asm],
		[disable all ASM-related options [default=auto]]
	)],
	[USE_ASM=$enableval],
	[USE_ASM=auto]
)
USE_X86_ASM=no
AS_IF(
	[test "x$USE_ASM" != xno],
	[AC_PATH_PROG([NASM], [nasm])]
	[AS_CASE(
		[$target],

		[i?86-*],
		[AS_IF(
			[test "x$NASM" != x],
			[USE_ASM=yes]
			[USE_X86_ASM=yes],
			[USE_ASM=no]
		)],

		[AC_MSG_NOTICE([no ASM routines available for this target])]
		[USE_ASM=unavailable]
	)]
)
AS_IF(
	[test "x$enable_asm" = xyes -a "x$USE_ASM" = xno],
	[AC_MSG_FAILURE([unable to enable ASM routines])]
)

dnl Check for NASM output format.
AC_ARG_WITH(
	[nasm-format],
	[AC_HELP_STRING(
		[--with-nasm-format[[=format]]],
		[use this output format for NASM (see "nasm -hf" output for]
		[available formats) [default=auto]]
	)],
	[NASM_FORMAT=$withval],
	[AS_IF([test "x$NASM" != x], [NASM_FORMAT=auto], [NASM_FORMAT=])]
)
AS_IF(
	[test "x$NASM_FORMAT" = xauto],
	[AC_MSG_CHECKING([for nasm output format])]
	[AS_CASE(
		[$target],

		[i?86-*mingw*],
		[NASM_FORMAT=win32],

		[x86_64-*mingw*],
		[NASM_FORMAT=win64],

		[i?86-*],
		[NASM_FORMAT=elf32],

		[x86_64-*],
		[NASM_FORMAT=elf64],

		[AC_MSG_RESULT([failed])]
		[AC_MSG_ERROR(
			[can't determine what format NASM should use, \
please specify --with-nasm-format=format]
		)]
	)]
	[AC_MSG_RESULT([$NASM_FORMAT])]
	[AC_MSG_WARN([NASM format auto-detection is crappy at best])],
	[AS_IF(
		[test "x$NASM_FORMAT" != x],
		[AC_MSG_NOTICE([NASM output format is $NASM_FORMAT])]
	)]
)

dnl Check for the need to prefix ASM globals with underscores.
dnl For ELF, also add -DNASM_STACK_NOEXEC.
AS_IF(
	[! test -z "$NASM_FORMAT"],
	[AC_MSG_CHECKING([whether ASM globals require an underscore])]
	[AS_CASE(
		[$NASM_FORMAT],

		[elf*],
		[AC_MSG_RESULT([no])]
		[NASM="$NASM -DNASM_STACK_NOEXEC"],

		[AC_MSG_RESULT([yes])]
		[NASM="$NASM --prefix _"]
	)]
)

dnl Crap TV filters support.
AC_ARG_ENABLE(
	[ctv],
	[AC_HELP_STRING([--disable-ctv], [disable Crap TV filters])],
	[USE_CTV=$enableval],
	[USE_CTV=yes]
)

dnl hqx filters support.
AC_ARG_ENABLE(
	[hqx],
	[AS_HELP_STRING([--disable-hqx], [disable hqx filters])],
	[USE_HQX=$enableval],
	[USE_HQX=yes]
)

dnl x86-specific ASM options.
AC_ARG_ENABLE(
	[x86-mmx],
	[AC_HELP_STRING([--enable-x86-mmx], [enable MMX memcpy])],
	dnl If --disable-asm isn't specified, MMX must be auto-detected,
	dnl unless forced via --enable-x86-mmx.
	[USE_X86_MMX=$enableval],
	[AS_IF(
		[test "x$USE_X86_ASM" != xno],
		[USE_X86_MMX=auto],
		[USE_X86_MMX=no]
	)]
)
AC_ARG_ENABLE(
	[x86-ctv],
	[AC_HELP_STRING([--enable-x86-ctv], [enable ASM Crap TV filters])],
	dnl Disable this if --disable-ctv is given.
	[AS_IF(
		[test "x$USE_CTV" != xno],
		[USE_X86_CTV=$enableval],
		[USE_X86_CTV=no]
	)],
	[AS_IF(
		[test "x$USE_CTV" != xno],
		[USE_X86_CTV=$USE_X86_ASM],
		[USE_X86_CTV=no]
	)]
)
AC_ARG_ENABLE(
	[x86-tiles],
	[AC_HELP_STRING([--enable-x86-tiles], [enable ASM tiles])],
	[USE_X86_TILES=$enableval],
	[USE_X86_TILES=$USE_X86_ASM]
)
AC_ARG_ENABLE(
	[x86-mz80],
	[AC_HELP_STRING([--enable-x86-mz80], [use ASM version of MZ80])],
	[USE_X86_MZ80=$enableval],
	[USE_X86_MZ80=$USE_X86_ASM]
)

dnl If MMX is to be automatically enabled, make sure it is actually supported.
AS_IF(
	[test "x$USE_X86_MMX" = xauto],
	[AC_MSG_CHECKING([for MMX support])]
	[AS_IF(
		[test "x$cross_compiling" = xyes],
		USE_X86_MMX=$USE_X86_ASM
		[AC_MSG_RESULT([$USE_X86_ASM (untested)])],
		[
{
	cat <<EOF > conftest.asm &&
bits 32
section .text
global main
main:
	emms
	xor eax, eax	; Return value of 0
	ret
EOF
	$NASM -f $NASM_FORMAT -o conftest.$OBJEXT -- conftest.asm &&
	$CC -o conftest$EXEEXT conftest.$OBJEXT &&
	./conftest$EXEEXT &&
	USE_X86_MMX=yes ||
	USE_X86_MMX=no
	rm -f conftest*
} 1>&AS_MESSAGE_LOG_FD 2>&1
		]
		[AC_MSG_RESULT([$USE_X86_MMX])]
	)]
)

AS_IF(
	[test "x$USE_X86_ASM" = xno &&	\
	 test "x$USE_X86_MMX" = xyes -o	\
	 "x$USE_X86_CTV" = xyes -o	\
	 "x$USE_X86_TILES" = xyes -o	\
	 "x$USE_X86_MZ80" = xyes],
	[AC_MSG_FAILURE(
		[x86 ASM support is unavailable, you can't use x86 options]
	)]
)

dnl CPU emulators.
AC_ARG_WITH(
	[star],
	[AS_HELP_STRING(
		[--with-star],
		[include StarScream CPU core [default=auto]]
	)],
	[WITH_STAR=$withval],
	[WITH_STAR=$USE_X86_ASM]
)
AS_IF(
	[test "x$with_star" = xyes -a "x$USE_X86_ASM" = xno],
	[AC_MSG_FAILURE(
		[StarScream can only be enabled on x86 targets with a \
working ASM support]
	)]
)

AC_ARG_WITH(
	[musa],
	[AS_HELP_STRING(
		[--with-musa],
		[include Musashi CPU core [default=yes]]
	)],
	[WITH_MUSA=$withval],
	[WITH_MUSA=yes]
)
AS_IF(
	[test "x$WITH_MUSA" != xyes -a "x$WITH_STAR" != xyes],
	[AC_MSG_WARN([neither Musashi nor StarScream are enabled])]
)

dnl check if debugger should be enabled
AC_ARG_ENABLE(
	[debugger],
	[AS_HELP_STRING(
		[--enable-debugger],
		[enable debugger [default=no]]
	)],
	[USE_DEBUGGER=$enableval],
	[USE_DEBUGGER=no]
)

AS_IF(
	[test "x$WITH_MUSA" != xyes -a "x$USE_DEBUGGER" = xyes],
	[AC_MSG_FAILURE([debugger support requires musa cpu core])]
)

AC_ARG_WITH(
	[mz80],
	[AS_HELP_STRING(
		[--with-mz80],
		[include MZ80 CPU core [default=yes]]
	)],
	[WITH_MZ80=$withval],
	[WITH_MZ80=yes]
)

AC_ARG_WITH(
	[cz80],
	[AS_HELP_STRING(
		[--with-cz80],
		[include CZ80 CPU core [default=yes]]
	)],
	[WITH_CZ80=$withval],
	[WITH_CZ80=yes]
)

dnl Prevent dgen_tobin from being linked with unnecessary libraries.
DGEN_LIBS="$LIBS"
LIBS="$TOBIN_LIBS"

dnl Define everything.
AS_IF([test "x$USE_OPENGL" = xyes], [AC_DEFINE([WITH_OPENGL])])
AS_IF([test "x$USE_LIBARCHIVE" = xyes], [AC_DEFINE([WITH_LIBARCHIVE])])
AS_IF([test "x$USE_DEBUGGER" = xyes], [AC_DEFINE([WITH_DEBUGGER])])
AS_IF([test "x$USE_DEBUG" != xyes], [AC_DEFINE([NDEBUG])])
AS_IF([test "x$USE_JOYSTICK" != x], [AC_DEFINE([WITH_JOYSTICK])])
AS_IF([test "x$USE_JOYSTICK" = xSDL], [AC_DEFINE([WITH_SDL_JOYSTICK])])
AS_IF([test "x$USE_JOYSTICK" = xLinux], [AC_DEFINE([WITH_LINUX_JOYSTICK])])
AS_IF([test "x$WITH_MUSA" = xyes], [AC_DEFINE([WITH_MUSA])])
AS_IF([test "x$WITH_STAR" = xyes], [AC_DEFINE([WITH_STAR])])
AS_IF([test "x$WITH_MZ80" = xyes], [AC_DEFINE([WITH_MZ80])])
AS_IF([test "x$WITH_CZ80" = xyes], [AC_DEFINE([WITH_CZ80])])
AS_IF([test "x$USE_ASM" = xyes], [AC_DEFINE([WITH_ASM])])
AS_IF(
	[test "x$USE_X86_ASM" = xyes],
	[AC_DEFINE([WITH_X86_ASM])]
	[AC_DEFINE([HAVE_MEMCPY_H])]
)
AS_IF([test "x$USE_CTV" = xyes], [AC_DEFINE([WITH_CTV])])
AS_IF([test "x$USE_HQX" = xyes], [AC_DEFINE([WITH_HQX])])
AS_IF([test "x$USE_X86_MZ80" = xyes], [AC_DEFINE([WITH_X86_MZ80])])
AS_IF([test "x$USE_X86_MMX" = xyes], [AC_DEFINE([WITH_X86_MMX])])
AS_IF([test "x$USE_X86_CTV" = xyes], [AC_DEFINE([WITH_X86_CTV])])
AS_IF([test "x$USE_X86_TILES" = xyes], [AC_DEFINE([WITH_X86_TILES])])

AM_CONDITIONAL([WITH_CTV], [test "x$USE_CTV" = xyes])
AM_CONDITIONAL([WITH_HQX], [test "x$USE_HQX" = xyes])
AM_CONDITIONAL([WITH_MUSA], [test "x$WITH_MUSA" = xyes])
AM_CONDITIONAL([WITH_STAR], [test "x$WITH_STAR" = xyes])
AM_CONDITIONAL([WITH_MZ80], [test "x$WITH_MZ80" = xyes])
AM_CONDITIONAL([WITH_CZ80], [test "x$WITH_CZ80" = xyes])
AM_CONDITIONAL([WITH_X86_ASM], [test "x$USE_X86_ASM" = xyes])
AM_CONDITIONAL([WITH_X86_MZ80], [test "x$USE_X86_MZ80" = xyes])
AM_CONDITIONAL([WITH_X86_MMX], [test "x$USE_X86_MMX" = xyes])
AM_CONDITIONAL([WITH_X86_CTV], [test "x$USE_X86_CTV" = xyes])
AM_CONDITIONAL([WITH_X86_TILES], [test "x$USE_X86_TILES" = xyes])

AC_SUBST(CC_FOR_BUILD)
AC_SUBST(CFLAGS_FOR_BUILD)
AC_SUBST(OBJEXT_FOR_BUILD)
AC_SUBST(EXEEXT_FOR_BUILD)
AC_SUBST(NASM)
AC_SUBST(NASM_FORMAT)
AC_SUBST(DGEN_LIBS)

dnl Done!
AC_OUTPUT(
	[Makefile]
	[star/Makefile]
	[musa/Makefile]
	[mz80/Makefile]
	[sdl/Makefile]
)

AC_MSG_NOTICE([

Front-end
  OpenGL: $USE_OPENGL
  Joystick: $USE_JOYSTICK
  Crap TV filters: $USE_CTV
  hqx filters: $USE_HQX
  Compressed ROMs: $USE_LIBARCHIVE
  Debugger: $USE_DEBUGGER
  Debugging: $USE_DEBUG

CPU cores
  Musashi M68K: $WITH_MUSA
  StarScream: $WITH_STAR
  MZ80: $WITH_MZ80
  CZ80: $WITH_CZ80

ASM support ($USE_ASM)
  x86 ASM
    MZ80: $USE_X86_MZ80
    MMX memcpy: $USE_X86_MMX
    Crap TV filters: $USE_X86_CTV
    Tiles: $USE_X86_TILES
])
